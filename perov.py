import gen
#import genRP
#import genDJ
from flask import Flask, request, render_template, Response
from model import *
app = Flask(__name__)

flipped=['PEA','PMA']

@app.route("/", methods=['GET', 'POST'])
def index():
    return render_template('index.html')

@app.route("/update", methods=['GET', 'POST'])
def update():
    type=request.args.get("type")
    metal=request.args.get("metal")
    halide=request.args.get("halide")
    bond=float(request.args.get("bond"))
    atilt=float(request.args.get("atilt"))
    btilt=float(request.args.get("btilt"))
    ctilt=float(request.args.get("ctilt"))
    if type=='3D':
        cation=request.args.get("cation")
        struc=gen.gen3d(bond,cation,metal,halide,atilt,btilt,ctilt,getLigand(cation))
        cif=struc2cif(struc)
        return render_template('jmol_temp.html',atoms=struc.atomList,num=len(struc.atomList),a=struc.acell,b=struc.bcell,c=struc.ccell)
    n=int(request.args.get('n'))
    layer=float(request.args.get('layer'))
    cation='MA'
    if n!=1:
        cation=request.args.get("cation")
    if type=='RP':
        ligand=request.args.get("rpLigand")
        struc=gen.genRP(n,layer,bond,getLigand(cation),metal,halide,atilt,btilt,ctilt,getLigand(ligand))
        return render_template('jmol_temp.html',atoms=struc.atomList,num=len(struc.atomList),a=struc.acell,b=struc.bcell,c=struc.ccell)
    if type=='DJ':
        ligand=request.args.get("djLigand")
        struc=gen.genDJ(n,layer,bond,getLigand(cation),metal,halide,atilt,btilt,ctilt,getLigand(ligand))
        return render_template('jmol_temp.html',atoms=struc.atomList,num=len(struc.atomList),a=struc.acell,b=struc.bcell,c=struc.ccell)

@app.route("/getcif", methods=['GET', 'POST'])
def getcif():
    type=request.args.get("type")
    metal=request.args.get("metal")
    halide=request.args.get("halide")
    bond=float(request.args.get("bond"))
    atilt=float(request.args.get("atilt"))
    btilt=float(request.args.get("btilt"))
    ctilt=float(request.args.get("ctilt"))
    if type=='3D':
        cation=request.args.get("cation")
        struc=gen.gen3d(bond,cation,metal,halide,atilt,btilt,ctilt,getLigand(cation))
        cif=struc2cif(struc)
        return Response(
            cif,
            mimetype="text/cif",
            headers={"Content-disposition":
                     "attachment; filename="+struc.name+".cif"})
    n=int(request.args.get('n'))
    layer=float(request.args.get('layer'))
    cation='MA'
    if n!=1:
        cation=request.args.get("cation")
    if type=='RP':
        ligand=request.args.get("rpLigand")
        struc=gen.genRP(n,layer,bond,getLigand(cation),metal,halide,atilt,btilt,ctilt,getLigand(ligand))
        cif=struc2cif(struc)
        return Response(
            cif,
            mimetype="text/cif",
            headers={"Content-disposition":
                     "attachment; filename="+struc.name+".cif"})
    if type=='DJ':
        ligand=request.args.get("djLigand")
        struc=gen.genDJ(n,layer,bond,getLigand(cation),metal,halide,atilt,btilt,ctilt,getLigand(ligand))
        cif=struc2cif(struc)
        return Response(
            cif,
            mimetype="text/cif",
            headers={"Content-disposition":
                     "attachment; filename="+struc.name+".cif"})

def struc2cif(struc):
    cif="#======================================================================\n\n# CRYSTAL DATA\n\n#----------------------------------------------------------------------\n\n"
    cif+="#Generated by Metal Halide Perovskite Structure Generator by F. Zhang and S.Silver in Kahn Group\n"
    cif+="#Found at: metalhalideperovskite.pythonanywhere.com\n"
    cif+="data_VESTA_phase_1\n"
    cif+="\n_chemical_name_common                  " + struc.name+"\n"
    cif+="_cell_length_a                         {:f}(1.)\n".format(struc.acell)
    cif+="_cell_length_b                         {:f}(1.)\n".format(struc.bcell)
    cif+="_cell_length_c                         {:f}(1.)\n".format(struc.ccell)
    cif+="_cell_angle_alpha                      90\n"
    cif+="_cell_angle_beta                       90\n"
    cif+="_cell_angle_gamma                       90\n"
    cif+="_space_group_name_H-M_alt              'P 1'\n"
    cif+="_space_group_IT_number                 1\n\n"
    cif+="loop_\n_space_group_symop_operation_xyz\n   'x, y, z'\n\n"
    cif+="loop_\n   _atom_site_label\n   _atom_site_occupancy\n   _atom_site_fract_x\n   _atom_site_fract_y\n   _atom_site_fract_z\n   _atom_site_adp_type\n   _atom_site_B_iso_or_equiv\n   _atom_site_type_symbol\n"
    for a in struc.atomList:
        cif+='{}\t1.0\t{:0.6f}\t{:0.6f}\t{:0.6f}\tBiso\t1.000000\t{}\n'.format(a.name,a.x/struc.acell+0.25,a.y/struc.bcell+0.25,a.z/struc.ccell+0.25,a.element)
    return cif

def getLigand(ligName):
    f=open('static/ligands/'+ligName+'.mol',"r")
    flip=1
    if ligName in flipped:
        flip=-1
    all=f.readlines()
    allAtoms=[]
    for l in all:
        j=l.split()
        if len(j)==16 or len(j)==4:
            a=Atom(j[3],flip*float(j[0]),float(j[1]),float(j[2]),j[3])
            allAtoms.append(a)
    return Ligand(allAtoms)
